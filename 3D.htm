<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Div avec Cube 3D et Logos 3D animés">
    <title>École 3D</title>
    <style>


    </style>
</head>
<body>
    <div id="canvas-container"></div>

    <!-- Inclusion de la bibliothèque Three.js et TWEEN.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>

    <script>
        // Initialisation de la scène, de la caméra et du renderer
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById("canvas-container").appendChild(renderer.domElement);

        // Couleur de fond transparent
        renderer.setClearColor(0xffffff, 0);

        // Matériaux avec les couleurs pour chaque face du cube
        const materials = {
            left: new THREE.MeshBasicMaterial({ color: 0x1a237e, transparent: true, opacity: 0.6, side: THREE.DoubleSide }),
            right: new THREE.MeshBasicMaterial({ color: 0xb0bec5, transparent: true, opacity: 0.6, side: THREE.DoubleSide }),
            top: new THREE.MeshBasicMaterial({ color: 0x7986cb, transparent: true, opacity: 0.7, side: THREE.DoubleSide }),
            front: new THREE.MeshBasicMaterial({ color: 0x9575cd, transparent: true, opacity: 0.8, side: THREE.DoubleSide }),
            back: new THREE.MeshBasicMaterial({ color: 0xe8eaf6, transparent: true, opacity: 0.5, side: THREE.DoubleSide })
        };

        // Création des faces du cube avec des dimensions réduites
        const boxLeft = new THREE.BoxGeometry(0.05, 0.6, 0.6);
        const boxRight = new THREE.BoxGeometry(0.05, 0.5, 0.5);
        const boxTop = new THREE.BoxGeometry(0.6, 0.05, 0.6);
        const boxFront = new THREE.BoxGeometry(0.6, 0.6, 0.05);
        const boxBack = new THREE.BoxGeometry(0.5, 0.5, 0.05);

        const leftFace = new THREE.Mesh(boxLeft, materials.left);
        const rightFace = new THREE.Mesh(boxRight, materials.right);
        const topFace = new THREE.Mesh(boxTop, materials.top);
        const frontFace = new THREE.Mesh(boxFront, materials.front);
        const backFace = new THREE.Mesh(boxBack, materials.back);

        // Mise à jour des positions pour s'ajuster à la nouvelle taille du cube
        leftFace.position.set(-0.45, 0, 0);
        rightFace.position.set(0.45, 0, -0.05);
        topFace.position.set(0, 0.425, 0);
        frontFace.position.set(0, 0, 0.425);
        backFace.position.set(0, 0, -0.55);

        scene.add(leftFace);
        scene.add(rightFace);
        scene.add(topFace);
        scene.add(frontFace);
        scene.add(backFace);

        // Inclinaison du cube pour un effet trois quarts
        scene.rotation.y = Math.PI / 4;

        // Position de la caméra pour être de face
        camera.position.set(0, 1, 2.5); // Légère élévation pour voir le cube
        camera.lookAt(0, 0, 0);

        function floatAnimation(mesh) {
            new TWEEN.Tween(mesh.position)
                .to({ y: mesh.position.y + 0.1 }, 2000)
                .easing(TWEEN.Easing.Quadratic.InOut)
                .yoyo(true)
                .repeat(Infinity)
                .start();
        }

        floatAnimation(leftFace);
        floatAnimation(rightFace);
        floatAnimation(topFace);
        floatAnimation(frontFace);
        floatAnimation(backFace);

        // Ajout de la lumière à la scène
        const light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(5, 5, 5);
        scene.add(light);
        
        const ambientLight = new THREE.AmbientLight(0x404040, 0.5); // Lumière ambiante douce
        scene.add(ambientLight);

        function animate() {
            requestAnimationFrame(animate);
            TWEEN.update();
            renderer.render(scene, camera);
        }

        animate();

        window.addEventListener('resize', () => {
            const width = window.innerWidth;
            const height = window.innerHeight;
            renderer.setSize(width, height);
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        });
    </script>
</body>
</html>
